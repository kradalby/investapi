"""
This type stub file was generated by pyright.
"""

import time
import sys
from threading import RLock
from typing import Any, Union

"""
Dictionary with auto-expiring values for caching purposes.

Expiration happens on any access, object is locked during cleanup from expired
values. Can not store more than max_len elements - the oldest will be deleted.

>>> ExpiringDict(max_len=100, max_age_seconds=10)

The values stored in the following way:
{
    key1: (value1, created_time1),
    key2: (value2, created_time2)
}

NOTE: iteration over dict and also keys() do not remove expired values!
"""
class ExpiringDict(OrderedDict):
    def __init__(self, max_len: Union[int, None], max_age_seconds: Union[float, None], items: Union[None, dict, OrderedDict, ExpiringDict] = ...) -> None:
        ...
    
    def __contains__(self, key): # -> bool:
        """ Return True if the dict has a key, else return False. """
        ...
    
    def __getitem__(self, key, with_age=...): # -> tuple[Unknown, Unknown]:
        """ Return the item of the dict.

        Raises a KeyError if key is not in the map.
        """
        ...
    
    def __setitem__(self, key, value, set_time=...): # -> None:
        """ Set d[key] to value. """
        ...
    
    def pop(self, key, default=...):
        """ Get item from the dict and remove it.

        Return default if expired or does not exist. Never raise KeyError.
        """
        ...
    
    def ttl(self, key): # -> None:
        """ Return TTL of the `key` (in seconds).

        Returns None for non-existent or expired keys.
        """
        ...
    
    def get(self, key, default=..., with_age=...): # -> tuple[Unknown, Unknown] | tuple[Unknown, None]:
        """ Return the value for key if key is in the dictionary, else default. """
        ...
    
    def items(self): # -> list[Unknown]:
        """ Return a copy of the dictionary's list of (key, value) pairs. """
        ...
    
    def items_with_timestamp(self): # -> list[Unknown]:
        """ Return a copy of the dictionary's list of (key, value, timestamp) triples. """
        ...
    
    def values(self): # -> list[Unknown]:
        """ Return a copy of the dictionary's list of values.
        See the note for dict.items(). """
        ...
    
    def fromkeys(self):
        """ Create a new dictionary with keys from seq and values set to value. """
        ...
    
    def iteritems(self):
        """ Return an iterator over the dictionary's (key, value) pairs. """
        ...
    
    def itervalues(self):
        """ Return an iterator over the dictionary's values. """
        ...
    
    def viewitems(self):
        """ Return a new view of the dictionary's items ((key, value) pairs). """
        ...
    
    def viewkeys(self):
        """ Return a new view of the dictionary's keys. """
        ...
    
    def viewvalues(self):
        """ Return a new view of the dictionary's values. """
        ...
    
    def __reduce__(self): # -> tuple[Type[ExpiringDict], tuple[int | Any | None, float | Any | None, tuple[Literal['reduce_result'], list[Unknown]]]]:
        ...
    


